{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "dp",
		"body": [
			"printf(\"$1 : %d$2\\n\",$3);$0",
		],
		"description": "Log output to console"
	},
	"Print to string console": {
		"prefix": "sp",
		"body": [
			"printf(\"$1 : %s$2\\n\",$3);$0",
		],
		"description": "Log output to console"
	},
	"Print to char console": {
		"prefix": "cp",
		"body": [
			"printf(\"$1 : %c$2 \",$3);$0",
		],
		"description": "Log output to console"
	},
	"print to for loop": {
        "prefix": "for",
        "body": [
            "for (int i = 0; i < $1; i++) {",
            "    printf(\"$2 : %d$3\", $4);",
            "}$0"
        ],
        "description": "For loop with printf"
    },
	"Scan the input":{
		"prefix": "scan",
		"body": [
			"scanf(\"%d\",$1);$0"
		],
		"description": "used to scan the user input"
	},
	"Headline":{
		"prefix": "headline",
		"body": [
			"hd();",
    		"printf(\"$1\\n\");",
    		"uhd();$0"
		]
	},
	"body":{
		"prefix": "body",
		"body": [
			"#include\"stdio.h\"",
			"#include \"additional.h\"",
			"int main(){",
        	"\tstart();",
			"",
			"\t\t$0",
			"",
		    "\tend();",
		    "\treturn 0;",
			"}",
		],
	},
	"newline":{
		"prefix": "nline();",
		"body": [
			"printf(\"$1\\n\"$2);$0"
		]
	},
	"comment start":{
		"prefix": "sc",
		"body": [
			"//<=================================>$1 <================================>//"
		]
	},
	"comment end":{
		"prefix": "ec",
		"body" : [
			"//<-------------------------------- End of program -------------------------------->//"
		]
	},
	"ecc":{
		"prefix": "ecc",
		"body" : [
			"/*",
			"\t\t\t\t\t\t\t\t\t\t\t-",
			"\t\t\t\t\t\t\t\t\t\t\t|",
			"\t\t\t\t\t\t\t\t\t\t\t|",
			"\t\t\t\t\t\t\t\t\t\t\t|",
			"\t\t\t\t\t\t\t\t\t\t\t|",
			"\t\t\t\t\t\t\t\t\t\t\t-",
			"*/"
		]
	},
	"az":{
		"prefix": "az",
		"body": [
			"sizeof($1)/sizeof($1[0]);$0"
		]
	},
	"caz":{
		"prefix": "caz",
		"body": [
			"sizeof($1)/sizeof($1[0]);$0"
		]
	},
	"raz":{
		"prefix": "raz",
		"body": [
			"sizeof($1[0])/sizeof($1[0][0]);$0"
		]
	},
	"ao":{
		"prefix": "ao",
		"body": [
			"printf(\"\\n--------------------------------\\n\");"
		]
	},
	"oa":{
		"prefix": "oa",
		"body": [
			"printf(\"-> $1\",$2);$0"
		]
	},
	"ta":{
		"prefix": "ta",
		"body": [
			"printf(\"\\t-> $1\",$2);$0"
		]
	},
}